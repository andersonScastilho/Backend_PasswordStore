"use strict";var U=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var N=(e,s)=>{for(var r in s)a(e,r,{get:s[r],enumerable:!0})},h=(e,s,r,o)=>{if(s&&typeof s=="object"||typeof s=="function")for(let t of g(s))!I.call(e,t)&&t!==r&&a(e,t,{get:()=>s[t],enumerable:!(o=f(s,t))||o.enumerable});return e};var R=(e,s,r)=>(r=e!=null?U(y(e)):{},h(s||!e||!e.__esModule?a(r,"default",{value:e,enumerable:!0}):r,e)),x=e=>h(a({},"__esModule",{value:!0}),e);var F={};N(F,{ShowUserController:()=>d});module.exports=x(F);var l=require("@prisma/client"),P=new l.PrismaClient;var i=class{async show(s){return await P.user.findUnique({where:{id:s}})}};var m=R(require("bcrypt")),n=class{get userEmail(){return this.props.userEmail}get userFullName(){return this.props.userFullName}get userPassword(){return this.props.userPassword}get userId(){return this.props.userId}set hashPasswordToUserPassword(s){this.props.userPassword=s}set updateUserFullName(s){this.props.userFullName=s}set updateUserEmail(s){this.props.userEmail=s}constructor(s){this.props=s}async encryptedPassword(s){return await m.default.hash(s,10)}async comparePasswords(s){return await m.default.compare(s,this.userPassword)}async updatePassword(s,r,o){if(!await this.comparePasswords(s))throw Error("Invalid password");if(r!==o)throw Error("Password confirmation must be the same as password");let u=await this.encryptedPassword(r);this.props.userPassword=u}};var p=class{constructor(s){this.showUserRepository=s}async execute(s){let r=await this.showUserRepository.show(s);if(!r)throw Error("User not found");return new n({userEmail:r.email,userFullName:r.fullName,userId:r.id,userPassword:r.password_hash})}};var c=require("zod"),E=c.z.object({userId:c.z.string()}),d=class{async handle(s,r,o){try{let{userId:t}=E.parse(s.params),u=new i,w=await new p(u).execute(t);return r.status(200).json({email:w.userEmail,fullName:w.userFullName})}catch(t){o(t)}}};0&&(module.exports={ShowUserController});
