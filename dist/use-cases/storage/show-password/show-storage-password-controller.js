"use strict";var U=Object.create;var p=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var B=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var k=(t,r)=>{for(var o in r)p(t,o,{get:r[o],enumerable:!0})},S=(t,r,o,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of E(r))!C.call(t,s)&&s!==o&&p(t,s,{get:()=>r[s],enumerable:!(e=v(r,s))||e.enumerable});return t};var l=(t,r,o)=>(o=t!=null?U(B(t)):{},S(r||!t||!t.__esModule?p(o,"default",{value:t,enumerable:!0}):o,t)),L=t=>S(p({},"__esModule",{value:!0}),t);var F={};k(F,{ShowStoragePasswordController:()=>w});module.exports=L(F);var I=require("@prisma/client"),c=new I.PrismaClient;var d=class{async show(r,o){return await c.storage.findFirst({where:{AND:{id:r,userId:o}}})}};var u=l(require("crypto")),b="aes-256-gcm",j=Buffer.from(process.env.SECRET_CRYPTO??"","hex"),z=u.default.randomBytes(16);var P=t=>{try{let r=u.default.createDecipheriv(b,j,Buffer.from(t.iv,"hex"));r.setAuthTag(Buffer.from(t.tag,"hex"));let o=Buffer.from(t.content,"hex");return Buffer.concat([r.update(o),r.final()]).toString("utf8")}catch{throw new Error("Erro ao descriptografar os dados.")}};var g=class{get storageId(){return this.props.storageId}get password(){return this.props.password}get account(){return this.props.account}get usageLocation(){return this.props.usageLocation}get link(){return this.props.link}get description(){return this.props.description}get userId(){return this.props.userId}set updatePassword(r){this.props.password=r}constructor(r){this.props=r}showPassword(r){let[o,e,s]=r.split(":");return P({iv:o,content:e,tag:s})}};var R=l(require("bcrypt")),h=class{constructor(r,o){this.showStorageRepository=r;this.showUserPerUserIdRepository=o}async execute(r,o,e){let s=await this.showStorageRepository.show(r,o);if(!s)throw Error("Storage not found");let i=new g({account:s.account,password:s.password,storageId:s.id,usageLocation:s.usageLocation,userId:s.userId,description:s.description??"",link:s.link??""}),a=await this.showUserPerUserIdRepository.show(o);if(!a)throw Error("User not found");if(!await R.default.compare(e,a.password_hash))throw Error("Invalid password");return i.showPassword(i.password)}};var m=class{async show(r){return await c.user.findUnique({where:{id:r}})}};var n=require("zod"),T=n.z.object({password:n.z.string()}),A=n.z.object({storageId:n.z.string(),userId:n.z.string()}),w=class{async handle(r,o,e){try{let{password:s}=T.parse(r.body),{storageId:i,userId:a}=A.parse(r.params);if(!s)return o.status(400).json({error:"Missing data"});let f=new d,y=new m,x=await new h(f,y).execute(i,a,s);return o.status(200).json({descryptedPassword:x})}catch(s){e(s)}}};0&&(module.exports={ShowStoragePasswordController});
