"use strict";var L=Object.create;var g=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var j=(r,t)=>{for(var o in t)g(r,o,{get:t[o],enumerable:!0})},R=(r,t,o,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let e of C(t))!U.call(r,e)&&e!==o&&g(r,e,{get:()=>t[e],enumerable:!(s=B(t,e))||s.enumerable});return r};var T=(r,t,o)=>(o=r!=null?L(E(r)):{},R(t||!r||!r.__esModule?g(o,"default",{value:r,enumerable:!0}):o,r)),b=r=>R(g({},"__esModule",{value:!0}),r);var q={};j(q,{UpdateStorageController:()=>w});module.exports=b(q);var x=require("@prisma/client"),d=new x.PrismaClient;var u=class{async show(t,o){return await d.storage.findFirst({where:{AND:{id:t,userId:o}}})}};var m=class{async update({account:t,description:o,link:s,usageLocation:e,storageId:i,password:p}){return await d.storage.update({where:{id:i},data:{account:t,description:o,link:s,usageLocation:e,password:p}})}};var f=T(require("crypto")),A="aes-256-gcm",F=Buffer.from(process.env.SECRET_CRYPTO??"","hex"),H=f.default.randomBytes(16);var I=r=>{try{let t=f.default.createDecipheriv(A,F,Buffer.from(r.iv,"hex"));t.setAuthTag(Buffer.from(r.tag,"hex"));let o=Buffer.from(r.content,"hex");return Buffer.concat([t.update(o),t.final()]).toString("utf8")}catch{throw new Error("Erro ao descriptografar os dados.")}};var h=class{get storageId(){return this.props.storageId}get password(){return this.props.password}get account(){return this.props.account}get usageLocation(){return this.props.usageLocation}get link(){return this.props.link}get description(){return this.props.description}get userId(){return this.props.userId}set updatePassword(t){this.props.password=t}constructor(t){this.props=t}showPassword(t){let[o,s,e]=t.split(":");return I({iv:o,content:s,tag:e})}};var S=class{constructor(t,o){this.updateStorageReposirory=t;this.showStorageRepository=o}async execute({storageId:t,account:o,description:s,link:e,usageLocation:i,userId:p,password:c}){if(!await this.showStorageRepository.show(t,p))throw Error("Storage not found");let n=await this.updateStorageReposirory.update({storageId:t,account:o,userId:p,description:s,link:e,usageLocation:i,password:c});return new h({account:n.account,password:"",storageId:n.id,usageLocation:n.usageLocation,userId:n.userId,description:n.description||"",link:n.link||""})}};var a=require("zod"),N=a.z.object({account:a.z.string().optional(),usageLocation:a.z.string().optional(),description:a.z.string().optional(),link:a.z.string().optional(),password:a.z.string().optional()}),D=a.z.object({userId:a.z.string(),storageId:a.z.string()}),w=class{async handle(t,o,s){try{let{account:e,usageLocation:i,description:p,link:c,password:y}=N.parse(t.body),{userId:n,storageId:l}=D.parse(t.params);if(!e&&!i&&!p&&!c)return o.status(400).json({error:"Missing data"});let P=new m,v=new u,k=await new S(P,v).execute({account:e,storageId:l,userId:n,description:p,link:c,usageLocation:i,password:y});return o.status(200).json({storage:k})}catch(e){s(e)}}};0&&(module.exports={UpdateStorageController});
