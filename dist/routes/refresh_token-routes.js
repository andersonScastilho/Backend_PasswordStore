"use strict";var P=Object.create;var p=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var N=(o,e)=>{for(var r in e)p(o,r,{get:e[r],enumerable:!0})},u=(o,e,r,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of v(e))!g.call(o,s)&&s!==r&&p(o,s,{get:()=>e[s],enumerable:!(t=S(e,s))||t.enumerable});return o};var k=(o,e,r)=>(r=o!=null?P(x(o)):{},u(e||!o||!o.__esModule?p(r,"default",{value:o,enumerable:!0}):r,o)),_=o=>u(p({},"__esModule",{value:!0}),o);var K={};N(K,{refreshTokenRoutes:()=>U});module.exports=_(K);var I=require("express");var l=k(require("dayjs"));var n=k(require("jsonwebtoken")),d=class{constructor(e){this.showUserPerUserIdRepository=e}async validAuth(e){let[,r]=e.split(" ");if(!n.default.verify(r,process.env.TOKEN_SECRET??""))throw Error("Invalid token");let{id:s,email:i}=n.default.verify(r,process.env.TOKEN_SECRET??""),a=await this.showUserPerUserIdRepository?.show(s);if(i!==a?.email)throw Error("Invalid token");return s}async authentication(e,r){if(!await e.comparePasswords(r))throw Error("Invalid password");return n.default.sign({id:e.userId,email:e.userEmail},process.env.TOKEN_SECRET??"",{expiresIn:process.env.TOKEN_EXPIRATION})}async authenticationProvider(e,r){return n.default.sign({id:e,email:r},process.env.TOKEN_SECRET??"",{expiresIn:process.env.TOKEN_EXPIRATION})}},y=d;var h=class{constructor(e,r){this.showRefreshTokenRepository=e;this.showUserPerUserIdRepository=r}async execute(e){let r=await this.showRefreshTokenRepository.show(e);if(!r)throw Error("Refresh token invalid");let t=await this.showUserPerUserIdRepository.show(r.userId);if(!t)throw Error("User not found");let s=new y;if((0,l.default)().isAfter(l.default.unix(r.expiresIn)))throw Error("Refresh_token expired");return await s.authenticationProvider(r.userId,t.email)}};var T=require("@prisma/client"),m=new T.PrismaClient;var c=class{async show(e){return await m.refresh_Token.findFirst({where:{id:e}})}};var R=require("zod");var f=class{async show(e){return await m.user.findUnique({where:{id:e}})}};var C=R.z.object({refresh_token:R.z.string()}),w=class{async handle(e,r,t){try{let{refresh_token:s}=C.parse(e.body),i=new c,a=new f,E=await new h(i,a).execute(s);return r.status(200).json({token:E})}catch(s){t(s)}}};var U=(0,I.Router)(),O=new w;U.post("/refresh-token",O.handle);0&&(module.exports={refreshTokenRoutes});
