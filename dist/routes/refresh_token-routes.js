"use strict";var P=Object.create;var p=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var N=(o,e)=>{for(var r in e)p(o,r,{get:e[r],enumerable:!0})},R=(o,e,r,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of S(e))!g.call(o,s)&&s!==r&&p(o,s,{get:()=>e[s],enumerable:!(t=v(e,s))||t.enumerable});return o};var k=(o,e,r)=>(r=o!=null?P(x(o)):{},R(e||!o||!o.__esModule?p(r,"default",{value:o,enumerable:!0}):r,o)),_=o=>R(p({},"__esModule",{value:!0}),o);var K={};N(K,{refreshTokenRoutes:()=>I});module.exports=_(K);var U=require("express");var l=k(require("dayjs"));var n=k(require("jsonwebtoken")),d=class{constructor(e){this.showUserPerUserIdRepository=e}async validAuth(e){let[,r]=e.split(" ");if(!n.default.verify(r,process.env.TOKEN_SECRET??""))throw Error("Invalid token");let{id:s,email:a}=n.default.verify(r,process.env.TOKEN_SECRET??""),i=await this.showUserPerUserIdRepository?.show(s);if(!i)throw Error("User not found");if(a!==i.email)throw Error("Invalid token");return s}async authentication(e,r){if(!await e.comparePasswords(r))throw Error("Invalid password");return n.default.sign({id:e.userId,email:e.userEmail},process.env.TOKEN_SECRET??"",{expiresIn:process.env.TOKEN_EXPIRATION})}async authenticationProvider(e,r){return n.default.sign({id:e,email:r},process.env.TOKEN_SECRET??"",{expiresIn:process.env.TOKEN_EXPIRATION})}},y=d;var h=class{constructor(e,r){this.showRefreshTokenRepository=e;this.showUserPerUserIdRepository=r}async execute(e){let r=await this.showRefreshTokenRepository.show(e);if(!r)throw Error("Refresh token invalid");let t=await this.showUserPerUserIdRepository.show(r.userId);if(!t)throw Error("User not found");if(t.verifiedEmail!==!0)throw Error("Unverified email");let s=new y;if((0,l.default)().isAfter(l.default.unix(r.expiresIn)))throw Error("Refresh_token expired");return await s.authenticationProvider(r.userId,t.email)}};var T=require("@prisma/client"),m=new T.PrismaClient;var f=class{async show(e){return await m.refresh_Token.findFirst({where:{id:e}})}};var u=require("zod");var c=class{async show(e){return await m.user.findUnique({where:{id:e}})}};var C=u.z.object({refresh_token:u.z.string()}),w=class{async handle(e,r,t){try{let{refresh_token:s}=C.parse(e.body),a=new f,i=new c,E=await new h(a,i).execute(s);return r.status(200).json({token:E})}catch(s){t(s)}}};var I=(0,U.Router)(),O=new w;I.post("/refresh-token",O.handle);0&&(module.exports={refreshTokenRoutes});
